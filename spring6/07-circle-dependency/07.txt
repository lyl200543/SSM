循环依赖

1.setter+singleton:可以解决循环依赖
  setter+prototype:两个Bean的scope都为prototype时,不可以解决循环依赖
  构造注入:不可以解决循环依赖


2.Spring为什么可以解决set +singleton模式下循环依赖?
    根本的原因在于:这种方式可以做到将“实例化Bean”和“给Bean属性赋值”这两个动作分开去完成
    实例化Bean的时候:调用无参数构造方法来完成。此时可以先不给属性赋值，可以提前将该Bean对象“曝光”给外界
    给Bean属性赋值的时候:调用setter方法来完成
    两个步骤是完全可以分离开去完成的，并且这两步不要求在同一个时间点上完成
    也就是说，Bean都是单例的，我们可以先把所有的单例Bean实例化出来，放到一个集合当中(我们可以称之为缓存)
    所有的单例Bean全部实例化完成之后，以后我们再慢慢的调用set方法给属性赋值。这样就解决了循环依赖的问题，


3.源码分析:
    AbstractAutowireCapableBeanFactory类的doCreateBean()方法

    DefaultsingletonBeanRegistry类中有三个比较重要的缓存:
        private final Map<String,0bject> singleton0bjects                      一级缓存
        private final Map<String, 0bject> earlySingleton0bjects                二级缓存
        private final Map<String, 0bjectFactory<?>> singletonFactories         三级缓存

    这三个缓存都是Map集合,Map集合的key存储的都是bean的name(bean id)
        一级缓存存储的是:单例Bean对象。完整的单例Bean对象，也就是说这个缓存中的Bean对象的属性都已经赋值了。是一个完整的Bean对象。
        二级缓存存储的是:早期的单例Bean对象。这个缓存中的单例Bean对象的属性没有赋值。只是一个早期的实例对象。
        三级缓存存储的是:单例工厂对象。这个里面存储了大量的“工厂对象"，每一个单例Bean对象都会对应一个单例工厂对象。
                     这个集合中存储的是，创建该单例对象时对应的那个单例工厂对象。