Bean的生命周期：

1.Bean的生命周期五步:
    第一步:实例化Bean(调用无参构造方法)
    第二步:Bean属性赋值(set注入)
    第三步:初始化Bean
    第四步:使用Bean
    第五步:销毁Bean

    需要注意的:
    第一:只有正常关闭spring容器，bean的销毁方法才会被调用,
    第二:ClassPathXmlApplicationContext类才有close()方法。
    第三:配置文件中的init-method指定初始化方法。destroy-method指定销毁方法。


2.Bean生命周期七步:比五步添加的那两步在哪里?在初始化Bean的前和后。
    第一步:实例化Bean
    第二步:Bean属性赋值
    第三步:执行“Bean后处理器"的before方法。
    第四步:初始化Bean
    第五步:执行“Bean后处理器"的after方法。
    第六步:使用Bean
    第七步:销毁Bean

    注意：
    要编写一个类实现BeanPostProcessor接口，并重写before和after方法
    要在spring.xml文件中配置Bean后处理器
        <bean class="com.lyl.spring6.logBeanPostProcessor"/>
    在spring.xml文件中配置的Bean后处理器将作用于当前配置文件中所有的Bean


3.Bean生命周期十步:比七步添加的那三步在哪里?
    点位1:在"Bean后处理器"before方法之前
        检查Bean是否实现了Aware相关的接口，如果实现了接口则调用这些接口中的方法。
        然后调用这些方法的目的是为了给你传递一些数据，让你更加方便使用

    点位2:在“Bean后处理器"before方法之后
        检查Bean是否实现了InitializingBean接口，如果实现了，则调用接口中的方法。

    点位3:使用Bean之后，或者说销毁Bean之前
        检查Bean是否实现了DisposableBean接口，如果实现了，则调用接口中的方法。

    Aware相关的接口包括:BeanNameAware、BeanClassLoaderAware、BeanFactoryAware
        当Bean实现了BeanNameAware，Spring会将Bean的名字传递给Bean。
        当Bean实现了BeanClassLoaderAware，Spring会将加载该Bean的类加载器传递给Bean。
        当Bean实现了BeanFactoryAware，Spring会将Bean工厂对象传递给Bean

    测试以上10步，可以让User类实现5个接口，并实现所有方法:
    BeanNameAware
    BeanClassLoaderAware
    BeanFactoryAware
    InitializingBean
    DisposableBean

    添加的这三个点位的特点:都是在检査你这个Bean是否实现了某些特定的接口
                       如果实现了这些接口，则Spring容器会调用这个接口中的方法。

    注意：Spring容器只对singleton的Bean进行完整的生命周期管理
        如果是prototype作用域的Bean，Spring容器只负责将该Bean初始化完毕
        等客户端程序一旦获取到该Bean之后，Spring容器就不再管理该对象的生命周期了。












