依赖注入

1.set注入
    核心实现原理:通过反射机制调用set方法来给属性赋值，让两个对象之间产生关系

    通过property标签获取到属性名:userDao
    通过属性名推断出set方法名:setUserDao
    通过反射机制调用setUserDao()方法给属性赋值

    property标签的name是属性名(系统自动生成的set方法的情况下)
    (如果set方法是自定义的，则name是set方法去掉set,将第一个字母变为小写)
    property标签的ref是要注入的bean对象的id.
    <property name="userDao" ref="UserDaoBean"/>


2.构造注入：
    <bean id="csBean" class="com.lyl.spring6.service.CustomerService">
            <constructor-arg index="0" ref="UserDao"/>
            <constructor-arg index="1" ref="VipDao"/>
    </bean>

    <bean id="csBean2" class="com.lyl.spring6.service.CustomerService">
            <!--name为构造函数中属性的名称-->
            <constructor-arg name="userDao" ref="UserDao"/>
            <constructor-arg name="vipDao" ref="VipDao"/>
    </bean>


3.set注入专题：
    -外部Bean:通过ref=""引入
    -内部Bean:在<property>标签内部的<bean>
    -简单类型：
    BeanUtils.class->isSimpleValueType()

        public static boolean isSimpleValueType(Class<?> type) {
                    return ClassUtils.isSimpleValueType(type);
                }

    ->ClassUtils.isSimpleValueType()

        public static boolean isSimpleValueType(Class<?> type) {
            return !isVoidType(type) &&
            (isPrimitiveOrWrapper(type) ||
            Enum.class.isAssignableFrom(type) ||
            CharSequence.class.isAssignableFrom(type) ||
            Number.class.isAssignableFrom(type) ||
            Date.class.isAssignableFrom(type) ||
            Temporal.class.isAssignableFrom(type) ||
            ZoneId.class.isAssignableFrom(type) ||
            TimeZone.class.isAssignableFrom(type) ||
            File.class.isAssignableFrom(type) ||
            Path.class.isAssignableFrom(type) ||
            Charset.class.isAssignableFrom(type) ||
            Currency.class.isAssignableFrom(type) ||
            InetAddress.class.isAssignableFrom(type) ||
            URI.class == type ||
            URL.class == type ||
            UUID.class == type ||
            Locale.class == type ||
            Pattern.class == type ||
            Class.class == type);
        }

    排除 void 类型：首先通过 !isVoidType(type) 排除 void 类型
    检查多种简单类型：然后检查类型是否属于以下任一类别：
    基本类型或其包装类 (isPrimitiveOrWrapper)
    枚举类型 (Enum.class.isAssignableFrom)
    字符串或字符序列 (CharSequence)(String实现了这个接口)
    数字类型 (Number)
    日期时间相关类型 (Date, Temporal, ZoneId, TimeZone)
    文件路径相关类型 (File, Path)
    字符集 (Charset)
    货币 (Currency)
    网络地址 (InetAddress)
    特定类的精确匹配 (URI, URL, UUID, Locale, Pattern, Class)

    应用：给数据源的属性赋值

    -级联属性赋值(了解)
        顺序不能颠倒
        要提供getter方法

    -数组注入
        数组元素为简单类型

             <bean id="QianDaYeBean" class="com.lyl.spring6.bean.QianDaYe">
                    <property name="hobbies">
                        <array>
                            <value>喝酒</value>
                            <value>抽烟</value>
                            <value>钓鱼</value>
                        </array>
                    </property>
                </bean>

        数组元素为引用类型

            <property name="women">
                        <array>
                            <ref bean="w1"/>
                            <ref bean="w2"/>
                            <ref bean="w3"/>
                        </array>
                    </property>


    -注入List集合
        <property name="names">
            <list>
    <!--                <ref bean=""/>-->
                <value>张三</value>
                <value>张三</value>
                <value>张三</value>
                <value>李四</value>
                <value>李四</value>
                <value>王五</value>
            </list>
        </property>

    -注入set集合

        <property name="addrs">
            <set>
<!--                <ref bean=""/>-->
                <value>中山</value>
                <value>中山</value>
                <value>中山</value>
                <value>珠海</value>
                <value>深圳</value>
                <value>广州</value>
            </set>
        </property>

    -注入map集合

        <property name="phones">
            <map>
<!--                <entry key-ref="" value-ref=""/>-->
                <entry key="1" value="110"/>
                <entry key="2" value="119"/>
                <entry key="3" value="120"/>
            </map>
        </property>

    -注入properties

        <property name="properties">
            <props>
                <prop key="driver">com.mysql.cj.jdbc.Driver</prop>
                <prop key="url">jdbc:mysql://localhost:3306/spring6</prop>
                <prop key="username">root</prop>
                <prop key="password">123456</prop>
            </props>
        </property>

    -注入null
        1*不写<property>
        (注意:value="null"是null字符串，不为null)
        2*
        <property name="name">
            <null/>
        </property>

    -注入空字符串
        1*
        <property name="name" value=""/>
        2*
        <property name="name">
            <value/>
        </property>

    -注入特殊符号
        XML中有5个特殊字符，分别是:<  >  '  "  &
        以上5个特殊符号在XML中会被特殊对待，
        会被当做XML语法的一部分进行解析，如果这些特殊符号直接出现在注入的字符串当中会报错。
        1*特殊符号使用转义字符代替  >  &gt;
            <property name="sign" value="2 &gt; 3"/>

        2*将含有特殊符号的字符串放到:<![CDATA[]]>当中
        因为放在CDATA区中的数据不会被XML文件解析器解析
            <property name="sign">
                 <value><![CDATA[2>3]]></value>
            </property>


4.


















