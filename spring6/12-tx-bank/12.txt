事务的属性：

！！！！！！注意：
【当使用AOP(动态代理)时，（例如事务管理TransactionManager），使用getBean()方法时：
1.如果目标类是是实现接口的，那么底层会调用JDK动态代理，
返回的代理对象实现了相同的接口，所以返回值的类型应为接口的类型，否则会出现类型不匹配的异常
2.如果目标类没有实现接口，则底层调用CGLIB动态代理，返回的代理对象为目标类的子类，
所以返回值的类型可以为目标类的类型
3.可以强制底层使用CGLIB动态代理，则返回值的类型都使用目标类的即可】

@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
@Reflective
public @interface Transactional {
    @AliasFor("transactionManager")
    String value() default "";

    @AliasFor("value")
    String transactionManager() default "";

    String[] label() default {};

    Propagation propagation() default Propagation.REQUIRED;

    Isolation isolation() default Isolation.DEFAULT;

    int timeout() default -1;

    String timeoutString() default "";

    boolean readOnly() default false;

    Class<? extends Throwable>[] rollbackFor() default {};

    String[] rollbackForClassName() default {};

    Class<? extends Throwable>[] noRollbackFor() default {};

    String[] noRollbackForClassName() default {};
}


重点：
    Propagation propagation() default Propagation.REQUIRED;  传播行为

    Isolation isolation() default Isolation.DEFAULT;  隔离级别

    int timeout() default -1;  超时设置

    boolean readOnly() default false;  只读

    String[] rollbackForClassName() default {};  为..异常时才回滚

    Class<? extends Throwable>[] noRollbackFor() default {};  为..异常时不回滚


1.事务的传播行为：
    什么是事务的传播行为?
    在service类中有a()方法和b()方法，a()方法上有事务，b()方法上也有事务
    当a()方法执行过程中调用了b()方法，事务是如何传递的?
    合并到一个事务里?还是开启一个新的事务?这就是事务传播行为

    事务传播行为在spring框架中被定义为枚举类型:
    public enum Propagation {
        REQUIRED( value: 0)
        SUPPORTS( value: 1)
        MANDATORY( value:2)
        REQUIRES_NEW( value:3)
        NOT_SUPPORTED( value:4)
        NEVER( value:5)
        NESTED( value:6);
    }

    共有七种传播行为:
    REQUIRED:支持当前事务，如果不存在就新建一个(默认)【没有就新建，有就加入】
    SUPPORTS:支持当前事务，如果当前没有事务，就以非事务方式执行【有就加入，没有就不管了】
    MANDATORY:必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常【有就加入，没有就抛异常】
    REQUIRES_NEW:开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起
    【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系,之前事务被挂起】
    NOT_SUPPORTED:以非事务方式运行，如果有事务存在，挂起当前事务【不支持事务，存在就挂起】
    NEVER:以非事务方式运行，如果有事务存在，抛出异常【不支持事务，存在就抛异常】
    NESTED:如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。
    被嵌套的事务可以独立于外层事务进行提交或回滚
    如果外层事务不存在，行为就像REQUIRED一样
    【有事务的话，就在这个事务里再嵌套一个完全独立的事务，没有事务就和REOUIRED一样，嵌套的事务可以独立的提交和回滚】


2.事务的隔离级别：(针对于查询而言)
    事务隔离级别类似于教室A和教室B之间的那道墙，隔离级别越高表示墙体越厚。隔音效果越好

    数据库中读取数据存在的三大问题:(三大读问题)
        脏读:读取到没有提交到数据库的数据，叫做脏读。
        不可重复读:在同一个事务当中，第一次和第二次读取的数据不一样。
        幻读:读到的数据是假的(高并发场景)

    事务隔离级别包括四个级别:
    读未提交:READ_UNCOMMITTED
    这种隔离级别，存在脏读问题，所谓的脏读(dirty read)表示能够读取到其它事务未提交的数据
    读提交:READ_COMMITTED
    解决了脏读问题，其它事务提交之后才能读到，但存在不可重复读问题
    可重复读:REPEATABLE_READ
    解决了不可重复读，可以达到可重复读效果，只要当前事务不结束，读取到的数据一直都是一样的,但存在幻读问题
    序列化:SERIALIZABLE
    解决了幻读问题，事务排队执行。不支持并发。


3.事务超时：
    @Transactional(timeout = 10)
    以上代码表示设置事务的超时时间为10秒。
    表示超过10秒如果该事务中所有的DML语句还没有执行完毕的话，最终结果会选择回滚。
    默认值-1，表示没有时间限制。

    这里有个坑，事务的超时时间指的是哪段时间?
    在当前事务当中，最后一条DML语句执行之前的时间。如果最后一条DML语句后面很有很多业务逻辑，
    这些业务代码执行的时间不被计入超时时间


4.只读事务：
    将当前事务设置为只读事务，在该事务执行过程中只允许select语句执行，delete insert update均不可执行。
    该特性的作用是:启动spring的优化策略。提高select语句执行效率。
    如果该事务中确实没有增删改操作，建议设置为只读事务。

