mybatis的核心配置文件

1.environment标签：
    一个environment代表一个数据库,例如atguigudb就是一个数据库
    一个环境对应一个SqlSessionFactory对象


2.transactionManager标签:
    1*作用:配置事务管理器。指定mybatis具体使用什么方式去管理事务
    2*type属性有两个值:
    第一个:JDBC:使用原生的JDBC代码来管理事务。
        conn.setAutoCommit(false);
        ...
        conn.commit();
    第二个:MANAGED:mybatis不再负责事务的管理，将事务管理交给其它的JEE(JavaEE)容器来管理
    例如:spring3，不缺分大小写。但是不能写其他值。只能是二选一:jdbc、managed

    3*在mybatis中提供了一个事务管理器接口:Transaction
    该接口下有两个实现类:
        JdbcTransaction
        ManagedTransaction
    如果type="JDBC"，那么底层会实例化JdbcTransaction对象
    如果type="MANAGED"，那么底层会实例化ManagedTransaction


3.dataSource标签：
    1*dataSource被称为数据源。
    2*dataSource作用是什么?为程序提供Connection对象。(但凡是给程序提供Connection对象的，都叫做数据源。)
    3*数据源实际上是一套规范。JDK中有这套规范:javax.sql.DataSource（接口）
    4*我们自己也可以编写数据源组件，只要实现javax.sql.DataSource接口就行了
    实现接口当中所有的方法。这样就有了自己的数据源
    比如你可以写一个属于自己的数据库连接池(数据库连接池是提供连接对象的，所以数据库连接池就是一个数据源)
    5*常见的数据源组件有哪些呢【常见的数据库连接池有哪些呢】?
        druid
        c3p0
        dbcp

    6*type属性用来指定数据源的类型，就是指定具体使用什么方式来获取Connection对象:
    type属性有三个值:必须是三选一。
    type="[UNPOOLED|POOLED|JNDI]"
        UNPOOLED:不使用数据库连接池技术。每一次请求过来之后，都是创建新的Connection对象。
        POOLED:使用mybatis自己实现的数据库连接池。
        JNDI:集成其它第三方的数据库连接池。
            JNDI是一套规范。谁实现了这套规范呢?大部分的web容器都实现了JNDI规范:
            例如:Tomcat、Jetty、WebLogic、WebSphere，这些服务器(容器)都实现了INDI规范。
            JNDI是:java命名目录接口。Tomcat服务器实现了这个规范。


4.properties标签：
    1*用在定义属性：
        <properties>
            <property name="jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
            <property name="jdbc.url" value="jdbc:mysql://localhost:3306/mybatis"/>
            <property name="jdbc.username" value="root"/>
            <property name="jdbc.password" value="123456"/>
        </properties>

    2*用在配置文件
        <properties resource="jdbc.properties"/>

    使用方法：value="${name}"























