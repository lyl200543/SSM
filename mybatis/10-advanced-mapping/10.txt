高级映射：

1.多对一：
    多对一的实现，通常是在多的⼀⽅中有一的属性
    第⼀种⽅式：⼀条SQL语句，级联属性映射。
    第⼆种⽅式：⼀条SQL语句，association。
    第三种⽅式：两条SQL语句，分步查询。（这种⽅式常⽤：优点⼀是可复⽤。优点⼆是⽀持懒加载。）
        延迟加载的核心原理是:用的时候再执行查询语句。不用的时候不查询
        作用:提高性能。尽可能的不查，或者说尽可能的少查。来提高效率。

        在mybatis当中怎么开启延迟加载呢?
        association标签中添加fetchType="lazy"
        注意:默认情况下是没有开启延迟加载的。需要设置:fetchType="lazy"
        这种在association标签中配置fetchType="lazy"，是局部的设置，只对当前的association关联的sqL语句起作用

        在实际的开发中，大部分都是需要使用延迟加载的，所以建议开启全部的延迟加载机制:
        在mybatis核心配置文件中添加全局配置:lazyLoadingEnabled=true
        实际开发中的模式:
        把全局的延迟加载打开。
        如果某一步不需要使用延迟加载，请设置:fetchType="eager"


2.一对多：
    ⼀对多的实现，通常是在⼀的⼀⽅中有List集合属性。
    在Clazz类中添加List<Student> stus; 属性。
    ⼀对多的实现通常包括两种实现⽅式：
        第⼀种⽅式：collection
        第⼆种⽅式：分步查询


3.多对多：
    拆解为两个一对多，例如一个老师对多个学生，一个学生对多个老师